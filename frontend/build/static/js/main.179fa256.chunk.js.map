{"version":3,"sources":["components/ProfileForm.js","components/Photographers.js","App.js","serviceWorker.js","index.js"],"names":["ProfileForm","onNewProfile","useState","first_name","setFirstname","last_name","setLastname","email","setEmail","description","setDescription","Form","Field","Input","placeholder","value","onChange","e","target","Button","onClick","a","photographer","fetch","method","headers","body","JSON","stringify","ok","console","log","Photographers","photographers","List","map","Item","key","photographer_netid","Header","App","setPhotographers","useEffect","then","response","json","data","className","Container","style","marginTop","currentPhotographers","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gVAGaA,EAAc,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAAkB,EACTC,mBAAS,IADA,mBACrCC,EADqC,KACzBC,EADyB,OAEXF,mBAAS,IAFE,mBAErCG,EAFqC,KAE1BC,EAF0B,OAGlBJ,mBAAS,IAHS,mBAGrCK,EAHqC,KAG9BC,EAH8B,OAINN,mBAAS,IAJH,mBAIrCO,EAJqC,KAIxBC,EAJwB,KAM3C,OACI,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,MAAN,KACI,kBAACC,EAAA,EAAD,CACIC,YAAY,cACZC,MAAOZ,EACPa,SAAU,SAAAC,GAAC,OAAIb,EAAaa,EAAEC,OAAOH,WAG7C,kBAACJ,EAAA,EAAKC,MAAN,KACI,kBAACC,EAAA,EAAD,CACIC,YAAY,aACZC,MAAOV,EACPW,SAAU,SAAAC,GAAC,OAAIX,EAAYW,EAAEC,OAAOH,WAG5C,kBAACJ,EAAA,EAAKC,MAAN,KACI,kBAACC,EAAA,EAAD,CACIC,YAAY,QACZC,MAAOR,EACPS,SAAU,SAAAC,GAAC,OAAIT,EAASS,EAAEC,OAAOH,WAGzC,kBAACJ,EAAA,EAAKC,MAAN,KACI,kBAACC,EAAA,EAAD,CACIC,YAAY,cACZC,MAAON,EACPO,SAAU,SAAAC,GAAC,OAAIP,EAAeO,EAAEC,OAAOH,WAG/C,kBAACJ,EAAA,EAAKC,MAAN,KACI,kBAACO,EAAA,EAAD,CACIC,QAAO,sBAAG,4BAAAC,EAAA,6DACAC,EAAe,CAAEnB,aAAYE,YAAWE,QAAOE,eAD/C,SAEiBc,MAAM,qBAAsB,CAC/CC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUN,KAPnB,cAUOO,KACTC,QAAQC,IAAI,mBACZ9B,EAAaqB,GACblB,EAAa,IACbE,EAAY,IACZE,EAAS,IACTE,EAAe,KAhBb,4CADd,a,kBCrCHsB,EAAgB,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC5B,OACI,kBAACC,EAAA,EAAD,KACKD,EAAcE,KAAI,SAAAb,GACf,OACM,kBAACY,EAAA,EAAKE,KAAN,CAAWC,IAAKf,EAAagB,oBACvB,kBAACC,EAAA,EAAD,eAAgBjB,EAAagB,oBAC7B,kBAACC,EAAA,EAAD,oBAAqBjB,EAAanB,YAClC,kBAACoC,EAAA,EAAD,mBAAoBjB,EAAajB,WACjC,kBAACkC,EAAA,EAAD,eAAgBjB,EAAaf,OAC7B,kBAACgC,EAAA,EAAD,qBAAsBjB,EAAab,mB,SCgBhD+B,MAvBf,WAAgB,IAAD,EAC6BtC,mBAAS,IADtC,mBACN+B,EADM,KACSQ,EADT,KAWb,OARAC,qBAAU,WACRnB,MAAM,eAAeoB,MAAK,SAAAC,GAAQ,OAChCA,EAASC,OAAOF,MAAK,SAAAG,GACnBL,EAAiBK,EAAKb,uBAGzB,IAGD,yBAAKc,UAAU,OACb,kBAACC,EAAA,EAAD,CAAWC,MAAO,CAACC,UAAW,KAC5B,kBAAC,EAAD,CAAajD,aAAc,SAAAqB,GAAY,OACrCmB,GAAiB,SAAAU,GAAoB,4BAAQA,GAAR,CAA8B7B,UAErE,kBAAC,EAAD,CAAeW,cAAeA,OCXlBmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.179fa256.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport { Form, Input, Button } from 'semantic-ui-react';\n\nexport const ProfileForm = ({onNewProfile}) => {\n    const[first_name, setFirstname] = useState('');\n    const[last_name, setLastname] = useState('');\n    const[email, setEmail] = useState('');\n    const[description, setDescription] = useState('');\n\n    return (\n        <Form>\n            <Form.Field>\n                <Input \n                    placeholder=\"First Name:\" \n                    value={first_name} \n                    onChange={e => setFirstname(e.target.value)}\n                />\n            </Form.Field>\n            <Form.Field>\n                <Input \n                    placeholder=\"Last Name:\" \n                    value={last_name} \n                    onChange={e => setLastname(e.target.value)}\n                />\n            </Form.Field>\n            <Form.Field>\n                <Input \n                    placeholder=\"Email\" \n                    value={email} \n                    onChange={e => setEmail(e.target.value)}\n                />\n            </Form.Field>\n            <Form.Field>\n                <Input \n                    placeholder=\"Description\" \n                    value={description} \n                    onChange={e => setDescription(e.target.value)}\n                />\n            </Form.Field>\n            <Form.Field>\n                <Button \n                    onClick={ async () => {\n                        const photographer = { first_name, last_name, email, description };\n                        const response = await fetch('/api/createProfile', {\n                            method: 'POST',\n                            headers: {\n                                'Content-Type': 'application/json'\n                            }, \n                            body: JSON.stringify(photographer)\n                        });\n                    \n                        if (response.ok) {\n                            console.log('response worked');\n                            onNewProfile(photographer);\n                            setFirstname('');\n                            setLastname('');\n                            setEmail('');\n                            setDescription('');\n                        }\n                    }}\n                >\n                    submit\n                </Button>\n            </Form.Field>\n        </Form>\n        );\n    };\n","import React from 'react';\nimport { List, Header } from 'semantic-ui-react';\n\nexport const Photographers = ({ photographers }) => {\n    return(\n        <List>\n            {photographers.map(photographer => {\n                return (\n                      <List.Item key={photographer.photographer_netid}>\n                            <Header>netid: {photographer.photographer_netid}</Header>\n                            <Header>first_name: {photographer.first_name}</Header>\n                            <Header>last_name: {photographer.last_name}</Header>\n                            <Header>email: {photographer.email}</Header>\n                            <Header>description: {photographer.description}</Header>\n                      </List.Item>  \n                );\n            })}\n        </List>\n    );\n};","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { ProfileForm } from './components/ProfileForm';\nimport { Photographers } from './components/Photographers'\nimport { Container } from 'semantic-ui-react';\n\nfunction App() {\n  const [photographers, setPhotographers] = useState([]);\n\n  useEffect(() => {\n    fetch(\"/api/browse\").then(response => \n      response.json().then(data => {\n        setPhotographers(data.photographers);\n      })\n    );\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Container style={{marginTop: 40}}>\n        <ProfileForm onNewProfile={photographer => \n          setPhotographers(currentPhotographers => [...currentPhotographers, photographer])\n          }/>\n        <Photographers photographers={photographers} />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}